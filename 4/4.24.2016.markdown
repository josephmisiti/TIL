#### Redux Concepts

1. Application State is maintained in single javascript object (global)

1. If a compenent wants change the state, he needs to dispatch an action, which is 
also a javascript object with one required property, `type`

1. Pure functions are deterministic. If you call them you know what the output will be, and they do 
not modify the input. They do not do non-deterministic things like update databases or require network connection.
Non-pure functions are the opposite of pure functions

1. To describe state mutations (`reducer`), you need to write a pure function that takes the 1) previous state of the application, 
2) the action that was dispatched, and returns the new state of the application. This function is the reducer and it has to
be pure.

    ```javascript
    function someReducer(state, action) {
        return newState
    }
    ```

1. The `store` in redux, binds the three prin of `state`, `actions`, and `reducers`. It holds the current
application `state`, it lets you dispatch `actions`, and when you create it, you need to specify the `reducer` of how state 
is updated with actions.

    The store has three important functions:
    
    `getState()` - returns the current application state
    `dispatch()` - lets you dispatch actiosn to change the state of your application
    `subscribe()` - lets you register a callback that will be called anytime by the store anytime an action has been
    dispatched
    
1. You need use `slice` and `concatenate` instead of `splice`, etc to updating arrays without mutation.

1. To update Objects without mutation (because of react), use `Object.assign()`